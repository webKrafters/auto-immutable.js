"use strict";(self.webpackChunkauto_immutable_docs=self.webpackChunkauto_immutable_docs||[]).push([[590],{15660:function(e,a,n){n.r(a);var t=n(67294),l=n(41520),u=n(30645);a.default=e=>{let{className:a}=e;return t.createElement("article",{className:`set-method-api-full-usage-page ${a}`},t.createElement("h1",null,"Combination Tags Usage:"),t.createElement("p",null,"Tags may be used in combination with the default usage where all top-level tag command results in property are sequentially merged into AutoImmutable data followed by the merging of the rest of the property changes."),t.createElement("p",null,"Get finer control over update order with the ",t.createElement("strong",null,t.createElement(u.Z,{to:"/api/method/set/tags/order-of-operations#batched-update-example"},"batched update method"))," illustrated in the next section."),t.createElement("h3",null,"Example:"),t.createElement(l.Z,null,"import AutoImmutable, { Tag } from 'auto-immutable';\n\nconst protectedData = {\n    a: {\n        b: [\n            { x: 7, y: 8, z: 9 },\n            { x: 17, y: 18, z: 19 }\n        ]\n    },\n    j: 10,\n    q: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n};\n\nconst aImmutable = new AutoImmutable( protectedData );\nconst consumer = aImmutable.connect();\n\nconsumer.set({\n    a: {\n        b: {\n            /* evaluated 1st */ [ Tag.DELETE ]: [ 0 ], // upon deleting aImmutable data.a.b[0] -> aImmutable data.a.b[1] becomes the new aImmutable data.a.b[0]\n            /* evaluated 3rd */ 0: Tag.CLEAR, // clear the new aImmutable data.a.b[0]\n            /* evaluated 4th */ 2: { x: 47, y: 48, z: 49 }, // add new item at aImmutable data.a.b[2],\n            /* evaluated 2nd */ [ Tag.PUSH ]: [{ x: 107, y: 108, z: 109 }] // appends aImmutable data.a.b[1]\n        }\n    },\n    j: { [ Tag.SET ]: currentValue => currentValue < 10 ? currentValue : 0 },\n    q: {\n        /* evaluated 1st */ [ Tag.MOVE ]: [ 5, 3, 2 ],\n        /* evaluated 2nd */ 12: 11\n    }\n});\n// => {\n//      a: {\n//          b: [\n//              {},\n//              { x: 107, y: 108, z: 109 },\n//              { x: 47, y: 48, z: 49 }\n//          ]\n//      },\n//      j: 0,\n//      q: [ 1, 2, 3, 6, 7, 4, 5, 8, 9, <empty>, <empty>, <empty>, 11 ]\n// };"),t.createElement("h3",{id:"batched-update-example"},"Batched Update Example:"),t.createElement(l.Z,null,"import AutoImmutable, { Tag } from 'auto-immutable';\n\nconst protectedData = {\n    a: \n        b: [\n            { x: 7, y: 8, z: 9 },\n            { x: 17, y: 18, z: 19 }\n        ]\n    },\n    j: 10,\n    q: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n};\n\nconst aImmutable = new AutoImmutable( protectedData );\nconst consumer = aImmutable.connect();\n\nconsumer.set([\n    {\n        a: {\n            b: {\n                [ Tag.DELETE ]: [ 0 ]\n            }\n        },\n        j: { [ Tag.SET ]: currentValue => currentValue < 10 ? currentValue : 0 },\n        q: {\n            /* evaluated 1st */ [ Tag.MOVE ]: [ 5, 3, 2 ],\n            /* evaluated 2nd */ 12: 11\n        }\n    },\n    { a: { b: { 0: Tag.CLEAR } } },\n    { a: { b: { 2: { x: 47, y: 48, z: 49 } } } },\n    { a: { b: { [ Tag.PUSH ]: [{ x: 107, y: 108, z: 109 }] } } }\n]);\n// => {\n//      a: \n//          b: [\n//              undefined,\n//              undefined,\n//              { x: 47, y: 48, z: 49 },\n//              { x: 107, y: 108, z: 109 }\n//          ]\n//      },\n//      j: 0,\n//      q: [ 1, 2, 3, 6, 7, 4, 5, 8, 9, <empty>, <empty>, <empty>, 11 ]\n// };"))}}}]);
//# sourceMappingURL=component---src-pages-api-method-set-tags-order-of-operations-tsx-089ca77fc520c2538432.js.map